Partially sorted search table (psst):

#### Sorted block (n_s elements) #### #### Unsorted block (n_u elements) ####
------------------------------------- -----
            S                           U
-------------------------------------------
                    C

C = S + U

n = n_s + n_u

P(x in U) = n_u / n

n_u <= k
avg n_u ~ k / 2
P(x in U) = O(k / 2n)

n >= n_s = n - n_u >= n - k
n_s = O(n)

Search:
    binary search + linear search * P(linear search)
    O(log(n_s)) + O(n_u) * P(x in U) = O(log(n_s)) + O(n_u^2 / n) =
    O(log(n)) + O(k^2 / 4n)

Insert:
    if x in C:
        insert = search = O(log(n) + k^2 / 4n)
    else:
        insert = search + sort * P(sort)
        sort = O(n_u * log(n_u)) + O(n) = O(k / 2 * log(k)) + O(n)
        P(sort) = P(n_u = k) = 1 / (k + 1) < 1 / k = O(1 / k)
        sort * P(sort) = O(log(k) / 2) + O(n / k)

    P(x in C) = p

    insert = search + sort * P(sort) * P(x in C) =
    O(log(n) + k^2 / 4n + p / 2 * log(k) + p * n / k)

    optimal k:
    k = (2p)^(1/3) * n^(2/3) ~ n^(2/3)

    For p ~ 0.5 here are some common values
    n = 10         -> k ~ 5
    n = 100        -> k ~ 22
    n = 1000       -> k ~ 100
    n = 10000      -> k ~ 464
    n = 100000     -> k ~ 2150
    n = 1000000    -> k ~ 10000
    n = 10000000   -> k ~ 46400
    n = 100000000  -> k ~ 215000
    n = 1000000000 -> k ~ 1000000

    using exact k gives for p ~ 0.5

    insert = O(
        log(n) +
        n^(1/3) / 4 +
        log(n^(2/3)) / 4 +
        n^(1/3) / 2
    )
    = O(6 * log(n) + 3/4 * n^(1/3))
    = O(n^(1/3))

    This means a doubling of n leads to roughly a
    2^(1/3) = 1.26 x increase in cost for large n

Search at insert-optimal k:
    O(log(n) + k^2 / 4n) =
    O(log(n) + n^(1/3) / 4) =
    O(n^(1/3))

    Same as insert

Delete:
    O(n)
