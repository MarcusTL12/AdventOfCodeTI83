Partially sorted search table:

#### Sorted block (n_s elements) #### #### Unsorted block (n_u elements) ####
------------------------------------- -----
            S                           U
-------------------------------------------
                    C

C = S + U

n = n_s + n_u

P(x in U) = n_u / n

n_u <= k
avg n_u ~ k / 2
P(x in U) = O(k / 2n)

n >= n_s = n - n_u >= n - k
n_s = O(n)

Search:
    binary search + linear search * P(linear search)
    O(log(n_s)) + O(n_u) * P(x in U) = O(log(n_s)) + O(n_u^2 / n) =
    O(log(n)) + O(k^2 / 4n)

Insert:
    if x in C:
        insert = search = O(log(n) + k^2 / 4n)
    else:
        insert = search + sort * P(sort)
        sort = O(n * log(n))
        P(sort) = P(n_u = k) = 1 / (k + 1) < 1 / k = O(1 / k)
        sort * P(sort) = O(n / k * log(n))

    P(x in C) = p

    insert = search + sort * P(sort) * P(x in C) =
    O(log(n) + k^2 / 4n + p / k * n * log(n))

    optimal k:
    k = 2^(1/3) * p^(1/3) * n^(2/3) * log(n)^(1/3)

    For p ~ 0.5 here are some common values
    n = 10       -> k ~ 7
    n = 100      -> k ~ 40
    n = 1000     -> k ~ 215
    n = 10000    -> k ~ 1100
    n = 100000   -> k ~ 5500
    n = 1000000  -> k ~ 27000
    n = 10000000 -> k ~ 130000

    using exact k gives

    insert = O(
        log(n) +
        2^(2/3)/4 * p^(2/3) * n^(1/3) * log(n)^(2/3) +
        1 / 2^(1/3) * p^(2/3) * n^(1/3) * log(n)^(2/3)
    )
    = O(log(n) + 1.19 * p^(2/3) * n^(1/3) * log(n)^(2/3))
    = O((n * log(n)^2)^(1/3))

    This means a doubling of n leads to roughly a 1.3x increase in cost for large n

Search at insert-optimal k:
    O(log(n) + k^2 / 4n) =
    O(log(n) + 2^(1/3) / 4 * p^(2/3) * n^(1/3) * log(n)^(2/3)) =
    O(log(n) + 0.315 * p^(2/3) * n^(1/3) * log(n)^(2/3)) =
    O((n * log(n)^2)^(1/3))

    Same as insert

Delete:
    O(n)
